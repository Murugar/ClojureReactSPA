

var Comment = React.createClass({
  rawMarkup: function() {
    var rawMarkup = marked(this.props.children.toString(), {
      sanitize: true
    });
    return {
      __html: rawMarkup
    };
  },

  render: function() {
    return (
      <div className="comment text-primary">
        <h2 className="commentAuthor text-warning">
          {this.props.author}
        </h2>
        <span dangerouslySetInnerHTML={this.rawMarkup()} />
      </div>
      );
  }
});

var CommentBox = React.createClass({
  loadCommentsFromServer: function() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({
          data: data
        });
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  handleCommentSubmit: function(comment) {
    var comments = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    comment.id = Date.now();
    var newComments = comments.concat([comment]);
    this.setState({
      data: newComments
    });
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: comment,
      success: function(data) {
        this.setState({
          data: data
        });
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({
          data: comments
        });
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  getInitialState: function() {
    return {
      data: []
    };
  },
  componentDidMount: function() {
    this.loadCommentsFromServer();
    setInterval(this.loadCommentsFromServer, this.props.pollInterval);
  },
  render: function() {
    return (

      <div className="container-fluid">
    <nav className="navbar navbar-inverse navbar-fixed-top">
    <div className="container-fluid">
      <div className="navbar-header">
      	<a className="navbar-brand" href="#">Clojure React SPA</a>
      </div>
      <div className="collapse navbar-collapse" id="myNavbar">
      <ul className="nav navbar-nav">
    	<li className="active"><a className="nav-item nav-link" href="#">Home</a></li>
    	<li><a className="nav-item nav-link" href="#">Contacts</a></li>
      </ul>
      <ul className="nav navbar-nav navbar-right">
  	    <li><a className="nav-item nav-link" href="#"><span className="glyphicon glyphicon-user"></span>Login</a></li>
  	    <li><a className="nav-item nav-link" href="#"><span className="glyphicon glyphicon-log-in"></span>Sign Up</a></li>
      </ul>
      </div>
      </div>
    </nav>
    <br/>
    <br/>
    <div className="container">		
    
    <div className="panel panel-primary">		
    <div className="panel-heading"><h3>Comment Info</h3></div>
    <div className="panel-body">
      <div className="commentBox">
      <div className="row">
      <div className="col-md-6">
      <div className="panel panel-warning">		
      <div className="panel-heading"><h4>Greetings</h4></div>
      <div className="panel-body bg-success">
            <h1 className="text-danger text-center"> Clojure React SPA</h1> 
        </div>
        </div>
      </div>
      <div className="col-md-6">
        <CommentList data={this.state.data} />
        <CommentForm onCommentSubmit={this.handleCommentSubmit} />
      </div>
    </div>    
    </div>
    </div>
    </div>
    </div>
    </div>
      );
  }
});

var CommentList = React.createClass({
  render: function() {
    var commentNodes = this.props.data.map(function(comment) {
      return (
        <Comment author={comment.author} key={comment.id}>
          {comment.text}
        </Comment>
        );
    });
    return (
      <div className="panel panel-danger">		
    		    <div className="panel-heading">Comments</div>
    		    <div className="panel-body">		
      <div className="commentList">
        {commentNodes}
      </div>
      </div>
      </div>
      );
  }
});

var CommentForm = React.createClass({
  getInitialState: function() {
    return {
      author: '',
      text: ''
    };
  },
  handleAuthorChange: function(e) {
    this.setState({
      author: e.target.value
    });
  },
  handleTextChange: function(e) {
    this.setState({
      text: e.target.value
    });
  },
  handleSubmit: function(e) {
    e.preventDefault();
    var author = this.state.author.trim();
    var text = this.state.text.trim();
    if (!text || !author) {
      return;
    }
    this.props.onCommentSubmit({
      author: author,
      text: text
    });
    this.setState({
      author: '',
      text: ''
    });
  },
  render: function() {
    return (

      	
      <div className="panel panel-info">		
    		    <div className="panel-heading">Post Comment</div>
    		    <div className="panel-body">		
      <form className="form" onSubmit={this.handleSubmit}>
      <div className="form-group">
        <label for="name">Name:</label>
        <input
      type="text"
      placeholder="Your name"
      value={this.state.author}
      onChange={this.handleAuthorChange} className="form-control" id="name"
      /> 
      </div>
        <div className="form-group">  
        <label for="message">Message:</label>
      <input
      type="text"
      placeholder="Say something..."
      value={this.state.text}
      onChange={this.handleTextChange} className="form-control" id="message"
      /> <br/>  </div>
      <button type="submit" className="btn btn-primary">Submit</button>
      
      </form>
        </div>
        </div>
       
      );
  }
});

ReactDOM.render(
  <CommentBox url="/api/comments" pollInterval={2000} />,
  document.getElementById('content')
);
